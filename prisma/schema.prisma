// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id            String           @id @default(cuid())
  email         String           @unique
  name          String
  password      String?
  clerkId       String          @unique
  applications  Application[]
  coldApproaches ColdApproach[]
  preparationMetrics PreparationMetric[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model Application {
  id           String           @id @default(cuid())
  userId       String
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyName  String
  position     String
  status       ApplicationStatus
  method       ApplicationMethod
  appliedDate  DateTime
  lastUpdated  DateTime?         @default(now())
  notes        String?
  contactEmail String?
  contactName  String?

  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model ColdApproach {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  type            ColdApproachType
  recipientName   String
  company         String
  content         String
  subject         String?
  recipientEmail  String?
  linkedinProfile String?
  status          ColdApproachStatus
  sentDate        DateTime

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model PreparationMetric {
  id          String               @id @default(cuid())
  userId      String
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  targetPerDay PreparationMetricUnit[]  
  progress    PreparationProgress[]  // Changed to array for multiple daily entries
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model PreparationMetricUnit {
  id       String  @id @default(cuid())
  value    Int
  label    String
  metricId String  
  metric   PreparationMetric @relation(fields: [metricId], references: [id], onDelete: Cascade)
}

model PreparationProgress {
  id        String   @id @default(cuid()) 
  date      DateTime @default(now())
  achieved  Int
  metricId  String
  metric    PreparationMetric @relation(fields: [metricId], references: [id], onDelete: Cascade)
}

enum ApplicationStatus {
  accepted
  waiting
  ghosted
  rejected
  interviewing
}

enum ApplicationMethod {
  email
  website
  linkedin
  referral
  other
}

enum ColdApproachType {
  email
  message
  linkedin_dm
}

enum ColdApproachStatus {
  unseen
  ghosted
  rejected
  waiting
  replied
}